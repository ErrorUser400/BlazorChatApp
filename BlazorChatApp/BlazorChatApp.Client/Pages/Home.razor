@page "/"

@inject IJSRuntime JSRuntime;

<PageTitle>Chat App</PageTitle>

@if (string.IsNullOrEmpty(userName))
{
    <UserInfoCollectionComponent OnUserInfoSaved="OnUserInfoProvided" />
}
else
{
    <div class="row">
        <div class="col-9">
            <ChatComponent FromUserId="@this.userId" ToUser="targetUser" connectedUsers="this.connectedUsers"
                           hubConnection="this.hubConnection"
                           OnMessageSent="OnMessageSent" />

            @if (systemMessage is not null && systemMessage.Count > 0)
            {
                <ul>
                    @foreach (string message in systemMessage)
                    {
                        <li>@message</li>
                    }
                </ul>
            }
        </div>

        <div class="col-3">
            <table style="width: 100%">
                <ConnectedUserComponent connectedUsers="this.connectedUsers" LogOnUserId="@this.userId" 
                OnUserSelected="OnUserSelected" 
                @ref="connectedUserComponent"/>
            </table>
        </div>
    </div>
}

@code{
    private string userName = string.Empty;
    private string userId = string.Empty;
    private List<string> systemMessage = new();
    private List<ConnectedUser> connectedUsers = new();
    private HubConnection? hubConnection;
    private ConnectedUser? targetUser;

    ConnectedUserComponent? connectedUserComponent;


    private async Task OnUserInfoProvided(string userName)
    {
        this.userName = userName;
        this.userId = Guid.NewGuid().ToString();

        await ConnectToServer(userId, userName);
    }

    private async Task ConnectToServer(string userId, string userName)
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl($"https://localhost:7070/chathub?userId={userId}&userName={userName}")
        .Build();

        hubConnection.On<string>("ReceiveSystemMessage", ReceiveSystemMessage);
        hubConnection.On<List<ConnectedUser>>("UpdateUserList", UpdateUserList);
        hubConnection.On<string, string, string>("ReceiveMessage", ReceiveMessage);

        await hubConnection.StartAsync();
    }

    private void ReceiveSystemMessage(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {  
            systemMessage.Add(message);
            StateHasChanged();
        }
    }

    private void UpdateUserList(List<ConnectedUser> users)
    {
        var existingUserDictionary = connectedUsers.ToDictionary(u => u.ConnectionId??string.Empty);


        if (users is not null && users.Count > 0)
        {
            foreach (var user in users)
            {
                if (!existingUserDictionary.ContainsKey(user.ConnectionId ?? string.Empty))
                {
                    connectedUsers.Add(user);
                }
            }

            connectedUsers = connectedUsers.Where(u => users.Any(newUser => newUser.ConnectionId == u.ConnectionId)).ToList();

            StateHasChanged();
        }

    }

    private async Task ReceiveMessage(string fromUserId, string fromConnectionId, string message)
    {
        if (!string.IsNullOrWhiteSpace(fromConnectionId))
        {
            var fromUser = connectedUsers.FirstOrDefault(u => u.ConnectionId == fromConnectionId);

            if (fromUser is not null)
            {
                fromUser.Messages.Add( new ChatMessage
                {
                    FromUserId = fromUserId,
                    ToUserId = this.userId,
                    Message = message
                });
                await JSRuntime.InvokeVoidAsync("playsound", "sounds/notification.mp3");
                StateHasChanged();
            }
        }
    }

    private void OnUserSelected(ConnectedUser toUser)
    {
        this.targetUser = toUser;
        StateHasChanged();
    }

    private void OnMessageSent(string toUserId)
    {
        connectedUserComponent?.ClearUnreadMessageCount(toUserId);
    }
}
